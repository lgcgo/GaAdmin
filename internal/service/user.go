// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package service

import (
	"GaAdmin/internal/model"
	"GaAdmin/internal/model/entity"
	"context"

	"github.com/lgcgo/tree"
)

type IUser interface {
	CreateGroup(ctx context.Context, in *model.UserGroupCreateInput) (*entity.UserGroup, error)
	GetGroup(ctx context.Context, groupId uint) (*entity.UserGroup, error)
	UpdateGroup(ctx context.Context, in *model.UserGroupUpdateInput) (*entity.UserGroup, error)
	DeleteGroup(ctx context.Context, groupId uint) error
	GetAllGroup(ctx context.Context) ([]*entity.UserGroup, error)
	GetGroupTreeData(ctx context.Context) (*model.TreeDataOutput, error)
	GetGroupTree(ctx context.Context) (*tree.Tree, error)
	GetGroupName(ctx context.Context, gourpID uint) (string, error)
	GetGroupChildrenIDs(ctx context.Context, groupId uint) ([]uint, error)
	IsGroupNameAvailable(ctx context.Context, name string, notIds ...uint) (bool, error)
	CheckGroupIds(ctx context.Context, groupIds []uint) ([]uint, error)
	SetupGroupAccess(ctx context.Context, groupId uint, auth_rule_ids []uint) error
	DeleteGroupAccessByRuleID(ctx context.Context, ruleId uint) error
	GetAllGroupAccess(ctx context.Context) ([]*entity.UserGroupAccess, error)
	SetupRoles(ctx context.Context, userId uint, group_ids []uint) error
	DeleteRolesByGroupId(ctx context.Context, groupId uint) error
	GetAllRoles(ctx context.Context) ([]*entity.UserRoles, error)
	CreateUser(ctx context.Context, in *model.UserCreateInput) (*entity.User, error)
	GetUser(ctx context.Context, userId uint) (*entity.User, error)
	GetUserByUuid(ctx context.Context, uuid string) (*entity.User, error)
	UpdateUser(ctx context.Context, in *model.UserUpdateInput) (*entity.User, error)
	DeleteUser(ctx context.Context, id uint) error
	GetUserPage(ctx context.Context, in *model.Page) (*model.UserPageOutput, error)
	GetCurrentUser(ctx context.Context) (*entity.User, error)
	UpdateUserAccount(ctx context.Context, account string) error
	UpdateCurrentUserMobile(ctx context.Context, mobile string) error
	UpdateCurrentUserEmail(ctx context.Context, email string) error
	UpdateCurrentUserPassword(ctx context.Context, password string) error
	SignPassport(ctx context.Context, in *model.UserSignPassportInput) (*entity.User, error)
	SignMobile(ctx context.Context, in *model.UserSignMobile) (*entity.User, error)
	IsUserAccountAvailable(ctx context.Context, account string, notIds ...uint) (bool, error)
	IsUserMobileAvailable(ctx context.Context, mobile string, notIds ...uint) (bool, error)
	IsUserEmailAvailable(ctx context.Context, email string, notIds ...uint) (bool, error)
	MustEncryptPasword(password, salt string) string
}

var localUser IUser

func User() IUser {
	if localUser == nil {
		panic("implement not found for interface IUser, forgot register?")
	}
	return localUser
}

func RegisterUser(i IUser) {
	localUser = i
}
